//
// Generated file, do not edit! Created by opp_msgc 4.4 from NetPacket/NetPacket.msg.
//

#ifndef _NETPACKET_M_H_
#define _NETPACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0404
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>NetPacket/NetPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet NetPacket
 * {
 *     int src = -1;
 *     int dst = -1;
 *     int sessionId = -1;
 *     int packetId = -1;
 *     int priority = 0;
 *     double startTime;
 *     double endTime;
 * }
 * </pre>
 */
class NetPacket : public ::cPacket
{
  protected:
    int src_var;
    int dst_var;
    int sessionId_var;
    int packetId_var;
    int priority_var;
    double startTime_var;
    double endTime_var;

  private:
    void copy(const NetPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NetPacket&);

  public:
    NetPacket(const char *name=NULL, int kind=0);
    NetPacket(const NetPacket& other);
    virtual ~NetPacket();
    NetPacket& operator=(const NetPacket& other);
    virtual NetPacket *dup() const {return new NetPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSrc() const;
    virtual void setSrc(int src);
    virtual int getDst() const;
    virtual void setDst(int dst);
    virtual int getSessionId() const;
    virtual void setSessionId(int sessionId);
    virtual int getPacketId() const;
    virtual void setPacketId(int packetId);
    virtual int getPriority() const;
    virtual void setPriority(int priority);
    virtual double getStartTime() const;
    virtual void setStartTime(double startTime);
    virtual double getEndTime() const;
    virtual void setEndTime(double endTime);
};

inline void doPacking(cCommBuffer *b, NetPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NetPacket& obj) {obj.parsimUnpack(b);}


#endif // _NETPACKET_M_H_
